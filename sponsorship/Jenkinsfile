pipeline {
    agent {
        label 'centos7 || centos7onDemand'
    }
    options {
        disableConcurrentBuilds()
        timestamps ()
    }
    environment {
        ARTIFACTORY = credentials('artifactory.auto.user_credentials')
    }
    stages {
        stage('Build') {
            steps {
                sh script: '''
                    # Build Sponsorship Microservice
                    ./gradlew -b ./build.gradle clean build test
                '''
            }
        }
        stage('Sonar') {
            steps {
                withSonarQubeEnv(credentialsId: 'Conference_sonar', installationName: 'SonarQube') {
                    sh script: '''# Sponsorship Microservice
                    ./gradlew -b ./build.gradle sonarqube \
                    -Dsonar.projectKey=sponsorship \
                    -Dsonar.organization=kyribamstraining \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.login=bbc606de8949bdabde5cb4f88bf29931c736d2b9 \
                    -Dsonar.pullrequest.provider=GitHub \
                    -Dsonar.pullrequest.github.repository=kyribamstraining/conference \
                    -Dsonar.pullrequest.key=''' + env.CHANGE_ID + ''' \
                    -Dsonar.pullrequest.branch=''' + env.CHANGE_BRANCH
                }
                sleep(30)
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }

            }
        }
        stage('Docker') {
            environment {
                registry1 = "kyriconf/sponsorship"
                registryCredential = 'conference_dockerhub'
            }
            agent any
            steps {
                sh script: '''
                    # Build Sponsorship Microservice Jar
                    ./gradlew -b ./build.gradle bootJar
                '''
                script {
                    dockerImage1 = docker.build("${registry1}:${env.GIT_COMMIT}", "./sponsorship")
                    withDockerRegistry([ credentialsId: registryCredential, url: "" ]) {
                        dockerImage1.push()
                        dockerImage1.push('latest')
                    }
                }
            }
        }

        stage('Approve candidate') {
        	agent none
        	steps {
        		script {
        			env.IS_CANDIDATE_APPROVED = input message: 'User input required',
        			submitter: 'authenticated',
        			parameters: [
        			    choice(
        			        name: 'Approve candidate',
        			        choices: 'no\nyes',
        			        description: 'Choose "yes" if you want to update the last stable system version'
        			    )
        			]
        		}
        	}
        }

        stage('Update system version') {
            when {
            	environment name: 'IS_CANDIDATE_APPROVED', value: 'yes'
            }
            steps {
                echo 'todo: update last stable system version as configuration file in common Git repository'
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
